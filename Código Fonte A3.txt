Index.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simulador de Conta Bancária</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

        #simulador {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        button {
            padding: 10px;
            margin-top: 10px;
            background-color: #4caf50;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        button:hover {
            background-color: #45a049;
        }

        #infoCliente, #infoConta {
            display: none;
            margin-top: 20px;
        }
    </style>
</head>
<body>

    <h1>Simulador de Conta Bancária</h1>

    <div id="simulador">
        <div id="infoCliente">
            <h2>Informações do Cliente:</h2>
            <p id="nomeCliente"></p>
            <p id="numeroConta"></p>
        </div>

        <div id="infoConta">
            <h2>Operações da Conta:</h2>
            <button onclick="realizarSaque()">Realizar Saque</button>
            <button onclick="consultarSaldo()">Consultar Saldo</button>
            <button onclick="realizarDeposito()">Realizar Depósito</button>
            <button onclick="sairDaConta()">Sair da Conta</button>
        </div>

        <script>
            var currentStep = 1;
            var saldo = 0;
            var nomeCliente = "";
            var numeroConta = 0;

            function nextStep() {
                if (currentStep === 1) {
                    nomeCliente = prompt("Digite o nome do cliente:");

                    // Simulação de chamada do código Python para criar a conta
                    numeroConta = Math.floor(Math.random() * 1000000) + 1;  // Gera um número aleatório como exemplo

                    document.getElementById('nomeCliente').innerText = "Nome do Cliente: " + nomeCliente;
                    document.getElementById('numeroConta').innerText = "Número da Conta: " + numeroConta;

                    document.getElementById('infoCliente').style.display = 'block';
                    document.getElementById('infoConta').style.display = 'block';
                } else if (currentStep === 2) {
                    // Lógica para acessar a conta na segunda etapa
                }

                if (currentStep < 3) {
                    currentStep++;
                } else {
                    alert("Simulação concluída!");
                }
            }

            function realizarSaque() {
                var valorSaque = parseFloat(prompt("Digite o valor do saque:"));
                if (valorSaque <= saldo) {
                    saldo -= valorSaque;
                    alert("Saque realizado com sucesso!\nNovo saldo: " + saldo);
                } else {
                    alert("Saldo insuficiente para realizar o saque.");
                }
            }

            function consultarSaldo() {
                alert("Saldo disponível: " + saldo);
            }

            function realizarDeposito() {
                var valorDeposito = parseFloat(prompt("Digite o valor do depósito:"));
                saldo += valorDeposito;
                alert("Depósito realizado com sucesso!\nNovo saldo: " + saldo);
            }

            function sairDaConta() {
                // Limpa as informações da conta
                nomeCliente = "";
                numeroConta = 0;
                saldo = 0;

                // Esconde as informações da conta
                document.getElementById('infoCliente').style.display = 'none';
                document.getElementById('infoConta').style.display = 'none';

                // Reinicia o fluxo
                currentStep = 1;
                alert("Conta encerrada. Você pode criar ou acessar outra conta.");
            }
        </script>

        <button onclick="nextStep()">Próxima Etapa</button>
    </div>

</body>
</html>


App.py:

class ContaBancaria:
    def __init__(self, nome_cliente, saldo_inicial):
        self.nome_cliente = nome_cliente
        self.saldo = saldo_inicial

    def depositar(self, valor):
        self.saldo += valor
        print(f"Depósito de {valor} realizado com sucesso. Novo saldo: {self.saldo}")

    def sacar(self, valor):
        if valor > self.saldo:
            print("Saldo insuficiente.")
        else:
            self.saldo -= valor
            print(f"Saque de {valor} realizado com sucesso. Novo saldo: {self.saldo}")


contas = {}


def criar_conta():
    nome_cliente = input("Digite o nome do cliente: ")
    saldo_inicial = float(input("Digite o saldo inicial: "))

    conta = ContaBancaria(nome_cliente, saldo_inicial)
    numero_conta = len(contas) + 1
    contas[numero_conta] = conta

    print(f"Conta criada com sucesso! Número da conta: {numero_conta}")


def acessar_conta():
    numero_conta = int(input("Digite o número da conta: "))

    conta = contas.get(numero_conta)

    if conta is None:
        print("Conta não encontrada. Verifique o número da conta e tente novamente.")
        return

    print(f"Bem-vindo, {conta.nome_cliente}!")

    while True:
        print("\nEscolha uma operação:")
        print("1. Consultar saldo")
        print("2. Realizar depósito")
        print("3. Realizar saque")
        print("4. Voltar ao menu principal")

        escolha = int(input())

        if escolha == 1:
            print(f"Saldo atual: {conta.saldo}")
        elif escolha == 2:
            valor_deposito = float(input("Digite o valor do depósito: "))
            conta.depositar(valor_deposito)
        elif escolha == 3:
            valor_saque = float(input("Digite o valor do saque: "))
            conta.sacar(valor_saque)
        elif escolha == 4:
            return
        else:
            print("Opção inválida. Tente novamente.")


while True:
    print("\nEscolha uma opção:")
    print("1. Criar conta")
    print("2. Acessar conta")
    print("3. Sair")

    escolha = int(input())

    if escolha == 1:
        criar_conta()
    elif escolha == 2:
        acessar_conta()
    elif escolha == 3:
        print("Saindo do simulador de banco. Até mais!")
        break
    else:
        print("Opção inválida. Tente novamente.")

unitest

import unittest
from simulador import ContaBancaria, ContaExistenteError, CredenciaisIncorretasError 

class TestContaBancaria(unittest.TestCase):
    def test_depositar(self):
        conta = ContaBancaria("Mateus", 1000.0)
        conta.depositar(500.0)
        self.assertEqual(conta.saldo, 1500.0)

    def test_sacar_saldo_suficiente(self):
        conta = ContaBancaria("Mateus", 1000.0)
        conta.sacar(500.0)
        self.assertEqual(conta.saldo, 500.0)

    def test_sacar_saldo_insuficiente(self):
        conta = ContaBancaria("Mateus", 1000.0)
        conta.sacar(1500.0)
        self.assertEqual(conta.saldo, 1000.0)

    def test_saldo_negativo_apos_saque(self):
        conta = ContaBancaria("Mateus", 1000.0)
        conta.sacar(1200.0)
        self.assertEqual(conta.saldo, 1000.0)

    def test_criar_nova_conta_com_dados_validos(self):
        nova_conta = ContaBancaria.criar_nova_conta("Luana", 1500.0)
        self.assertEqual(nova_conta.titular, "Luana")
        self.assertEqual(nova_conta.saldo, 1500.0)

    def test_unicidade_de_cada_conta_nova(self):
        with self.assertRaises(ContaExistenteError):
            conta1 = ContaBancaria.criar_nova_conta("Alice", 2000.0)
            conta2 = ContaBancaria.criar_nova_conta("Lucas", 3000.0)

    def test_login_com_credenciais_corretas(self):
        conta = ContaBancaria("Mateus", 1000.0)
        self.assertTrue(conta.realizar_login("Mateus", "senha_correta"))

    def test_bloqueio_de_acesso_com_credenciais_incorretas(self):
        conta = ContaBancaria("Mateus", 1000.0)
        self.assertFalse(conta.realizar_login("Mateus", "senha_incorreta"))

if _name_ == '_main_':
    unittest.main()